import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import { MultiSelect } from '@mantine/core';
import * as data from '../files/data'

let childs = {}
export default function Home() {
  const [categories, setCategories] = useState([])
  const [subCategories, setSubCategories] = useState([])
  const [miniCategories, setMiniCategories] = useState([])
  const [selected, setSelected] = useState([])
  const [subSelected, setSubSelected] = useState([])
  const [miniSelected, setMiniSelected] = useState([])

  const addSteelName = (value, steelName) => {
    let buffer = value
    buffer.label = buffer.label + `(${steelName})`
    return buffer
  }
  let getChilds = (array, steelname) => {
    let buffer = [...array].map(value => addSteelName(value, steelname))
    console.log(buffer)
    return buffer
  }

  useEffect(() => {
    childs = {}
    console.log(data)
    let darkMet = data.darkMet
    let colorMet = data.colorMet
    let steelItems = data.steelItems
    childs[data.categories[0].label] = data.darkMet
    childs[data.categories[1].label] = data.colorMet

    childs[darkMet[0].label] = getChilds(steelItems, darkMet[0].label)
    childs[darkMet[1].label] = getChilds(data.stainlessSteelItems, darkMet[1].label)

    childs[colorMet[0].label] = getChilds(data.aluminumItems, colorMet[0].label)
    childs[colorMet[1].label] = getChilds(data.copperItems, colorMet[1].label)
    childs[colorMet[2].label] = getChilds(data.brassItems, colorMet[2].label)
    childs[colorMet[3].label] = getChilds(data.bronzeItems, colorMet[3].label)
    childs[colorMet[4].label] = getChilds(data.titanItems, colorMet[4].label)
    setCategories(data.categories)
    console.log(childs)
    return () => { }
  }, [])
  let multiSelectChanged = (value, index) => {
    if (index == 1) {
      setSelected(value)
      let buffer = []
      console.log(childs)
      console.log(value)
      value.forEach((value) => {
        if (childs[value])
          buffer.push(...childs[value])
      })
      console.log(buffer)
      setSubCategories(buffer)
      if (!buffer)
        setMiniCategories([])
      buffer = miniSelected.map((selected) => { if (miniCategories.find(data => (data.value === selected))) return selected })
      setMiniSelected(buffer)
      buffer = subSelected.map((selected) => { if (subCategories.find(data => (data.value === selected))) return selected })
      setSubSelected(buffer)
      return
    }
    if (index == 2) {
      setSubSelected(value)
      let buffer = []
      console.log(childs)
      console.log(value)
      value.forEach((value) => {
        if (childs[value])
          buffer.push(...childs[value])
      })
      console.log(buffer)
      setMiniCategories(buffer)
      buffer = miniSelected.map((selected) => { if (miniCategories.find(data => (data.value === selected))) return selected })
      setMiniSelected(buffer)
      return
    }
    setMiniSelected(value)
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <MultiSelect
          data={categories}
          value={selected}
          onChange={(value) => multiSelectChanged(value, 1)}
          label="Выберите категорию"
        />
        <MultiSelect
          data={subCategories}
          value={subSelected}
          onChange={(value) => multiSelectChanged(value, 2)}
          label="Выберите подкатегорию"
        />
        <MultiSelect
          data={miniCategories}
          onChange={(value) => multiSelectChanged(value, 3)}
          value={miniSelected}
          label="Выберите мини Категорию"
        />
      </main>

      <footer className={styles.footer}>

      </footer>
    </div>
  )
}
